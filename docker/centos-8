FROM centos:8 as os-update
LABEL maintainer="Brad Aagaard <baagaard@usgs.gov>"

RUN dnf install -y \
        gcc \
	gcc-c++ \
	redhat-rpm-config \
	make \
        file \
	which \
	diffutils \
        automake \
        autoconf \
        libtool \
        curl \
	openssl \
	openssl-devel \
        zlib-devel \
	unzip \
        git \
	ca-certificates \
	python38 \
	python38-devel \
	python38-pip \
	python38-setuptools \
	python38-six \
	python38-numpy \
	python38-Cython \
	sqlite \
	sqlite-devel \
	gdb \
	valgrind \
	vim-common \
	vim-minimal \
	dnf-plugins-core

RUN dnf config-manager --set-enabled powertools && dnf install -y cppunit cppunit-devel

COPY docker/certs/ /usr/share/pki/ca-trust-source/anchors
RUN update-ca-trust enable

RUN alternatives --set python3 /usr/bin/python3.8
ENV PYTHON_VERSION 3.8

# ------------------------------------------------------------------------------
from os-update as user-setup

# Install geomodelgrids to /opt/geomodelgrids
# Download source code to $HOME/src
# Build geomodelgrids in $HOME/build


# Create 'gmg-tester' user
ENV GMG_USER gmg-tester
RUN useradd --create-home --shell /bin/bash $GMG_USER
ENV  INSTALL_DIR=/opt/geomodelgrids  HOME=/home/$GMG_USER
ENV  TOP_SRCDIR=$HOME/src  TOP_BUILDDIR=$HOME/build

RUN mkdir ${INSTALL_DIR} \
  && chown ${GMG_USER} ${INSTALL_DIR} \
  && chgrp ${GMG_USER} ${INSTALL_DIR}
ENV PATH=$PATH:$INSTALL_DIR/bin \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$INSTALL_DIR/lib:$INSTALL_DIR/lib64 \
    PYTHONPATH=${PYTHONPATH}:${INSTALL_DIR}/lib/python${PYTHON_VERSION}/site-packages:${INSTALL_DIR}/lib64/python${PYTHON_VERSION}/site-packages

USER ${GMG_USER}


## ------------------------------------------------------------------------------
from user-setup as build-deps

# Install dependencies to /opt/geomodelgrids

# --------------------------------------
# proj
# --------------------------------------
ENV PROJ_VER=6.3.1  src_dir=${TOP_SRCDIR}/proj  build_dir=${TOP_BUILDDIR}/proj
RUN mkdir -p ${src_dir} && mkdir -p ${build_dir}
WORKDIR ${src_dir}
RUN curl -O https://download.osgeo.org/proj/proj-${PROJ_VER}.tar.gz \
    && curl -O https://download.osgeo.org/proj/proj-datumgrid-1.8.zip \
    && tar -xf proj-${PROJ_VER}.tar.gz

WORKDIR ${build_dir}
RUN ${src_dir}/proj-${PROJ_VER}/configure --prefix=${INSTALL_DIR} SQLITE3_CFLAGS=-I/usr/include SQLITE3_LIBS="-L/usr/lib -lsqlite3" \
  && unzip -o ${src_dir}/proj-datumgrid-1.8.zip -d ${build_dir}/data/ \
  && make -j$(nproc) \
  && make install \
  && rm -r ${build_dir}


# --------------------------------------
# HDF5
# --------------------------------------
ENV HDF5_INCDIR=${INSTALL_DIR}/include  HDF5_LIBDIR=${INSTALL_DIR}/lib
ENV HDF5_VER=1.12.0  src_dir=${TOP_SRCDIR}/hdf5  build_dir=${TOP_BUILDDIR}/hdf5
RUN mkdir -p ${src_dir} && mkdir -p ${build_dir}
WORKDIR ${src_dir}
RUN curl -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-${HDF5_VER}/src/hdf5-${HDF5_VER}.tar.gz \
    && tar -xf hdf5-${HDF5_VER}.tar.gz

WORKDIR ${build_dir}
RUN ${src_dir}/hdf5-${HDF5_VER}/configure --prefix=${INSTALL_DIR} --enable-shared --disable-static \
  && make -j$(nproc) \
  && make install \
  && rm -r ${build_dir}

# --------------------------------------
# h5py
# --------------------------------------
RUN CC=gcc HDF5_LIBDIR=${HDF5_LIBDIR} HDF5_INCLUDEDIR=${HDF5_INCDIR} PYTHONUSERBASE=${INSTALL_DIR} python3 -m pip install --user https://files.pythonhosted.org/packages/a7/81/20d5d994c91ed8347efda90d32c396ea28254fd8eb9e071e28ee5700ffd5/h5py-3.1.0.tar.gz


WORKDIR ${HOME}
CMD /bin/bash
